"""Message sent via contact form"""
type Contactmessage {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  email: String
  message: String
  name: String
  whom: ENUM_CONTACTMESSAGE_WHOM
  where: ENUM_CONTACTMESSAGE_WHERE
}

type ContactmessageAggregator {
  count: Int
}

type ContactmessageConnection {
  values: [Contactmessage]
  groupBy: ContactmessageGroupBy
  aggregate: ContactmessageAggregator
}

type ContactmessageConnection_id {
  key: ID
  connection: ContactmessageConnection
}

type ContactmessageConnectionCreatedAt {
  key: DateTime
  connection: ContactmessageConnection
}

type ContactmessageConnectionEmail {
  key: String
  connection: ContactmessageConnection
}

type ContactmessageConnectionMessage {
  key: String
  connection: ContactmessageConnection
}

type ContactmessageConnectionName {
  key: String
  connection: ContactmessageConnection
}

type ContactmessageConnectionUpdatedAt {
  key: DateTime
  connection: ContactmessageConnection
}

type ContactmessageConnectionWhere {
  key: String
  connection: ContactmessageConnection
}

type ContactmessageConnectionWhom {
  key: String
  connection: ContactmessageConnection
}

type ContactmessageGroupBy {
  _id: [ContactmessageConnection_id]
  createdAt: [ContactmessageConnectionCreatedAt]
  updatedAt: [ContactmessageConnectionUpdatedAt]
  email: [ContactmessageConnectionEmail]
  message: [ContactmessageConnectionMessage]
  name: [ContactmessageConnectionName]
  whom: [ContactmessageConnectionWhom]
  where: [ContactmessageConnectionWhere]
}

input ContactmessageInput {
  email: String
  message: String
  name: String
  whom: ENUM_CONTACTMESSAGE_WHOM
  where: ENUM_CONTACTMESSAGE_WHERE
}

input createContactmessageInput {
  data: ContactmessageInput
}

type createContactmessagePayload {
  contactmessage: Contactmessage
}

input createDesignprojectInput {
  data: DesignprojectInput
}

type createDesignprojectPayload {
  designproject: Designproject
}

input createMemberInput {
  data: MemberInput
}

type createMemberPayload {
  member: Member
}

input createPhotoprojectInput {
  data: PhotoprojectInput
}

type createPhotoprojectPayload {
  photoproject: Photoproject
}

input createPostInput {
  data: PostInput
}

type createPostPayload {
  post: Post
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input createTestimonialInput {
  data: TestimonialInput
}

type createTestimonialPayload {
  testimonial: Testimonial
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

input createVideoprojectInput {
  data: VideoprojectInput
}

type createVideoprojectPayload {
  videoproject: Videoproject
}

"""
The `DateTime` scalar represents a date and time following the ISO 8601 standard
"""
scalar DateTime

input deleteContactmessageInput {
  where: InputID
}

type deleteContactmessagePayload {
  contactmessage: Contactmessage
}

input deleteDesignprojectInput {
  where: InputID
}

type deleteDesignprojectPayload {
  designproject: Designproject
}

input deleteMemberInput {
  where: InputID
}

type deleteMemberPayload {
  member: Member
}

input deletePhotoprojectInput {
  where: InputID
}

type deletePhotoprojectPayload {
  photoproject: Photoproject
}

input deletePostInput {
  where: InputID
}

type deletePostPayload {
  post: Post
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

input deleteTestimonialInput {
  where: InputID
}

type deleteTestimonialPayload {
  testimonial: Testimonial
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

input deleteVideoprojectInput {
  where: InputID
}

type deleteVideoprojectPayload {
  videoproject: Videoproject
}

"""
Projects involving graphic design, i.e. posters, flyers, logos, business cards
"""
type Designproject {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String
  description: String
  date: DateTime
  featured: Boolean
  slug: String
  thumbnail: UploadFile
  graphics(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  members(sort: String, limit: Int, start: Int, where: JSON): [Member]
}

type DesignprojectAggregator {
  count: Int
}

type DesignprojectConnection {
  values: [Designproject]
  groupBy: DesignprojectGroupBy
  aggregate: DesignprojectAggregator
}

type DesignprojectConnection_id {
  key: ID
  connection: DesignprojectConnection
}

type DesignprojectConnectionCreatedAt {
  key: DateTime
  connection: DesignprojectConnection
}

type DesignprojectConnectionDate {
  key: DateTime
  connection: DesignprojectConnection
}

type DesignprojectConnectionDescription {
  key: String
  connection: DesignprojectConnection
}

type DesignprojectConnectionFeatured {
  key: Boolean
  connection: DesignprojectConnection
}

type DesignprojectConnectionSlug {
  key: String
  connection: DesignprojectConnection
}

type DesignprojectConnectionThumbnail {
  key: ID
  connection: DesignprojectConnection
}

type DesignprojectConnectionTitle {
  key: String
  connection: DesignprojectConnection
}

type DesignprojectConnectionUpdatedAt {
  key: DateTime
  connection: DesignprojectConnection
}

type DesignprojectGroupBy {
  _id: [DesignprojectConnection_id]
  createdAt: [DesignprojectConnectionCreatedAt]
  updatedAt: [DesignprojectConnectionUpdatedAt]
  title: [DesignprojectConnectionTitle]
  description: [DesignprojectConnectionDescription]
  date: [DesignprojectConnectionDate]
  featured: [DesignprojectConnectionFeatured]
  slug: [DesignprojectConnectionSlug]
  thumbnail: [DesignprojectConnectionThumbnail]
}

input DesignprojectInput {
  title: String
  description: String
  date: DateTime
  graphics: [ID]
  featured: Boolean
  members: [ID]
  slug: String
  thumbnail: ID
}

enum ENUM_CONTACTMESSAGE_WHERE {
  Facebook
  Instagram
  Twitter
  YouTube
  Word
  of
  Mouth
  Email
  Announcement
  Google
  search
  UTD
  event
  Comet
  Marketing
  Member
  Presence
  Other
}

enum ENUM_CONTACTMESSAGE_WHOM {
  client
  partner
  other
}

input FileInput {
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  public_id: String
  related: [ID]
}

input InputID {
  id: ID!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""Members of Comet Marketing"""
type Member {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  slug: String
  name: String!
  gradyear: Int
  profilepicture: UploadFile
  bio: String
  website: String
  role: String
  Exec: Boolean
  Alum: Boolean
  joinDate: DateTime
  leaveDate: DateTime
  posts(sort: String, limit: Int, start: Int, where: JSON): [Post]
  designproject(sort: String, limit: Int, start: Int, where: JSON): [Designproject]
  photoproject(sort: String, limit: Int, start: Int, where: JSON): [Photoproject]
  videoproject(sort: String, limit: Int, start: Int, where: JSON): [Videoproject]
}

type MemberAggregator {
  count: Int
  sum: MemberAggregatorSum
  avg: MemberAggregatorAvg
  min: MemberAggregatorMin
  max: MemberAggregatorMax
}

type MemberAggregatorAvg {
  gradyear: Float
}

type MemberAggregatorMax {
  gradyear: Float
}

type MemberAggregatorMin {
  gradyear: Float
}

type MemberAggregatorSum {
  gradyear: Float
}

type MemberConnection {
  values: [Member]
  groupBy: MemberGroupBy
  aggregate: MemberAggregator
}

type MemberConnection_id {
  key: ID
  connection: MemberConnection
}

type MemberConnectionAlum {
  key: Boolean
  connection: MemberConnection
}

type MemberConnectionBio {
  key: String
  connection: MemberConnection
}

type MemberConnectionCreatedAt {
  key: DateTime
  connection: MemberConnection
}

type MemberConnectionExec {
  key: Boolean
  connection: MemberConnection
}

type MemberConnectionGradyear {
  key: Int
  connection: MemberConnection
}

type MemberConnectionJoinDate {
  key: DateTime
  connection: MemberConnection
}

type MemberConnectionLeaveDate {
  key: DateTime
  connection: MemberConnection
}

type MemberConnectionName {
  key: String
  connection: MemberConnection
}

type MemberConnectionProfilepicture {
  key: ID
  connection: MemberConnection
}

type MemberConnectionRole {
  key: String
  connection: MemberConnection
}

type MemberConnectionSlug {
  key: String
  connection: MemberConnection
}

type MemberConnectionUpdatedAt {
  key: DateTime
  connection: MemberConnection
}

type MemberConnectionWebsite {
  key: String
  connection: MemberConnection
}

type MemberGroupBy {
  _id: [MemberConnection_id]
  createdAt: [MemberConnectionCreatedAt]
  updatedAt: [MemberConnectionUpdatedAt]
  slug: [MemberConnectionSlug]
  name: [MemberConnectionName]
  gradyear: [MemberConnectionGradyear]
  profilepicture: [MemberConnectionProfilepicture]
  bio: [MemberConnectionBio]
  website: [MemberConnectionWebsite]
  role: [MemberConnectionRole]
  Exec: [MemberConnectionExec]
  Alum: [MemberConnectionAlum]
  joinDate: [MemberConnectionJoinDate]
  leaveDate: [MemberConnectionLeaveDate]
}

input MemberInput {
  slug: String
  name: String!
  gradyear: Int
  profilepicture: ID
  bio: String
  website: String
  posts: [ID]
  role: String
  designproject: [ID]
  photoproject: [ID]
  videoproject: [ID]
  Exec: Boolean
  Alum: Boolean
  joinDate: DateTime
  leaveDate: DateTime
}

union Morph = UsersPermissionsMe | UsersPermissionsMeRole | Contactmessage | createContactmessagePayload | updateContactmessagePayload | deleteContactmessagePayload | ContactmessageConnection | ContactmessageAggregator | ContactmessageGroupBy | ContactmessageConnection_id | ContactmessageConnectionCreatedAt | ContactmessageConnectionUpdatedAt | ContactmessageConnectionEmail | ContactmessageConnectionMessage | ContactmessageConnectionName | ContactmessageConnectionWhom | ContactmessageConnectionWhere | Designproject | createDesignprojectPayload | updateDesignprojectPayload | deleteDesignprojectPayload | DesignprojectConnection | DesignprojectAggregator | DesignprojectGroupBy | DesignprojectConnection_id | DesignprojectConnectionCreatedAt | DesignprojectConnectionUpdatedAt | DesignprojectConnectionTitle | DesignprojectConnectionDescription | DesignprojectConnectionDate | DesignprojectConnectionFeatured | DesignprojectConnectionSlug | DesignprojectConnectionThumbnail | Member | createMemberPayload | updateMemberPayload | deleteMemberPayload | MemberConnection | MemberAggregator | MemberAggregatorSum | MemberAggregatorAvg | MemberAggregatorMin | MemberAggregatorMax | MemberGroupBy | MemberConnection_id | MemberConnectionCreatedAt | MemberConnectionUpdatedAt | MemberConnectionSlug | MemberConnectionName | MemberConnectionGradyear | MemberConnectionProfilepicture | MemberConnectionBio | MemberConnectionWebsite | MemberConnectionRole | MemberConnectionExec | MemberConnectionAlum | MemberConnectionJoinDate | MemberConnectionLeaveDate | Photoproject | createPhotoprojectPayload | updatePhotoprojectPayload | deletePhotoprojectPayload | PhotoprojectConnection | PhotoprojectAggregator | PhotoprojectGroupBy | PhotoprojectConnection_id | PhotoprojectConnectionCreatedAt | PhotoprojectConnectionUpdatedAt | PhotoprojectConnectionTitle | PhotoprojectConnectionDate | PhotoprojectConnectionDescription | PhotoprojectConnectionFeatured | PhotoprojectConnectionSlug | Post | createPostPayload | updatePostPayload | deletePostPayload | PostConnection | PostAggregator | PostGroupBy | PostConnection_id | PostConnectionCreatedAt | PostConnectionUpdatedAt | PostConnectionTitle | PostConnectionBody | PostConnectionFeatured | PostConnectionAuthor | PostConnectionSlug | Testimonial | createTestimonialPayload | updateTestimonialPayload | deleteTestimonialPayload | TestimonialConnection | TestimonialAggregator | TestimonialGroupBy | TestimonialConnection_id | TestimonialConnectionCreatedAt | TestimonialConnectionUpdatedAt | TestimonialConnectionQuote | TestimonialConnectionClient | TestimonialConnectionSlug | Videoproject | createVideoprojectPayload | updateVideoprojectPayload | deleteVideoprojectPayload | VideoprojectConnection | VideoprojectAggregator | VideoprojectGroupBy | VideoprojectConnection_id | VideoprojectConnectionCreatedAt | VideoprojectConnectionUpdatedAt | VideoprojectConnectionTitle | VideoprojectConnectionDescription | VideoprojectConnectionFeatured | VideoprojectConnectionDate | VideoprojectConnectionVideoURLs | VideoprojectConnectionSlug | UploadFile | UploadFileConnection | UploadFileAggregator | UploadFileGroupBy | UploadFileConnection_id | UploadFileConnectionCreatedAt | UploadFileConnectionUpdatedAt | UploadFileConnectionName | UploadFileConnectionHash | UploadFileConnectionSha256 | UploadFileConnectionExt | UploadFileConnectionMime | UploadFileConnectionSize | UploadFileConnectionUrl | UploadFileConnectionProvider | UploadFileConnectionPublic_id | UsersPermissionsPermission | UsersPermissionsRole | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsRoleConnection | UsersPermissionsRoleAggregator | UsersPermissionsRoleGroupBy | UsersPermissionsRoleConnection_id | UsersPermissionsRoleConnectionName | UsersPermissionsRoleConnectionDescription | UsersPermissionsRoleConnectionType | UsersPermissionsUser | createUserPayload | updateUserPayload | deleteUserPayload | UsersPermissionsUserConnection | UsersPermissionsUserAggregator | UsersPermissionsUserGroupBy | UsersPermissionsUserConnection_id | UsersPermissionsUserConnectionUsername | UsersPermissionsUserConnectionEmail | UsersPermissionsUserConnectionProvider | UsersPermissionsUserConnectionConfirmed | UsersPermissionsUserConnectionBlocked | UsersPermissionsUserConnectionRole

type Mutation {
  createContactmessage(input: createContactmessageInput): createContactmessagePayload
  updateContactmessage(input: updateContactmessageInput): updateContactmessagePayload
  deleteContactmessage(input: deleteContactmessageInput): deleteContactmessagePayload
  createDesignproject(input: createDesignprojectInput): createDesignprojectPayload
  updateDesignproject(input: updateDesignprojectInput): updateDesignprojectPayload
  deleteDesignproject(input: deleteDesignprojectInput): deleteDesignprojectPayload
  createMember(input: createMemberInput): createMemberPayload
  updateMember(input: updateMemberInput): updateMemberPayload
  deleteMember(input: deleteMemberInput): deleteMemberPayload
  createPhotoproject(input: createPhotoprojectInput): createPhotoprojectPayload
  updatePhotoproject(input: updatePhotoprojectInput): updatePhotoprojectPayload
  deletePhotoproject(input: deletePhotoprojectInput): deletePhotoprojectPayload
  createPost(input: createPostInput): createPostPayload
  updatePost(input: updatePostInput): updatePostPayload
  deletePost(input: deletePostInput): deletePostPayload
  createTestimonial(input: createTestimonialInput): createTestimonialPayload
  updateTestimonial(input: updateTestimonialInput): updateTestimonialPayload
  deleteTestimonial(input: deleteTestimonialInput): deleteTestimonialPayload
  createVideoproject(input: createVideoprojectInput): createVideoprojectPayload
  updateVideoproject(input: updateVideoprojectInput): updateVideoprojectPayload
  deleteVideoproject(input: deleteVideoprojectInput): deleteVideoprojectPayload

  """Create a new role"""
  createRole(input: createRoleInput): createRolePayload

  """Update an existing role"""
  updateRole(input: updateRoleInput): updateRolePayload

  """Delete an existing role"""
  deleteRole(input: deleteRoleInput): deleteRolePayload
  createUser(input: createUserInput): createUserPayload
  updateUser(input: updateUserInput): updateUserPayload
  deleteUser(input: deleteUserInput): deleteUserPayload
  upload(refId: ID, ref: String, source: String, file: Upload!): UploadFile!
}

"""projects involving multiple photographs"""
type Photoproject {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String
  date: DateTime
  description: String
  featured: Boolean
  slug: String
  photos(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  members(sort: String, limit: Int, start: Int, where: JSON): [Member]
}

type PhotoprojectAggregator {
  count: Int
}

type PhotoprojectConnection {
  values: [Photoproject]
  groupBy: PhotoprojectGroupBy
  aggregate: PhotoprojectAggregator
}

type PhotoprojectConnection_id {
  key: ID
  connection: PhotoprojectConnection
}

type PhotoprojectConnectionCreatedAt {
  key: DateTime
  connection: PhotoprojectConnection
}

type PhotoprojectConnectionDate {
  key: DateTime
  connection: PhotoprojectConnection
}

type PhotoprojectConnectionDescription {
  key: String
  connection: PhotoprojectConnection
}

type PhotoprojectConnectionFeatured {
  key: Boolean
  connection: PhotoprojectConnection
}

type PhotoprojectConnectionSlug {
  key: String
  connection: PhotoprojectConnection
}

type PhotoprojectConnectionTitle {
  key: String
  connection: PhotoprojectConnection
}

type PhotoprojectConnectionUpdatedAt {
  key: DateTime
  connection: PhotoprojectConnection
}

type PhotoprojectGroupBy {
  _id: [PhotoprojectConnection_id]
  createdAt: [PhotoprojectConnectionCreatedAt]
  updatedAt: [PhotoprojectConnectionUpdatedAt]
  title: [PhotoprojectConnectionTitle]
  date: [PhotoprojectConnectionDate]
  description: [PhotoprojectConnectionDescription]
  featured: [PhotoprojectConnectionFeatured]
  slug: [PhotoprojectConnectionSlug]
}

input PhotoprojectInput {
  title: String
  date: DateTime
  photos: [ID]
  description: String
  featured: Boolean
  members: [ID]
  slug: String
}

"""A blog post"""
type Post {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String
  body: String
  featured: Boolean
  author: Member
  slug: String
}

type PostAggregator {
  count: Int
}

type PostConnection {
  values: [Post]
  groupBy: PostGroupBy
  aggregate: PostAggregator
}

type PostConnection_id {
  key: ID
  connection: PostConnection
}

type PostConnectionAuthor {
  key: ID
  connection: PostConnection
}

type PostConnectionBody {
  key: String
  connection: PostConnection
}

type PostConnectionCreatedAt {
  key: DateTime
  connection: PostConnection
}

type PostConnectionFeatured {
  key: Boolean
  connection: PostConnection
}

type PostConnectionSlug {
  key: String
  connection: PostConnection
}

type PostConnectionTitle {
  key: String
  connection: PostConnection
}

type PostConnectionUpdatedAt {
  key: DateTime
  connection: PostConnection
}

type PostGroupBy {
  _id: [PostConnection_id]
  createdAt: [PostConnectionCreatedAt]
  updatedAt: [PostConnectionUpdatedAt]
  title: [PostConnectionTitle]
  body: [PostConnectionBody]
  featured: [PostConnectionFeatured]
  author: [PostConnectionAuthor]
  slug: [PostConnectionSlug]
}

input PostInput {
  title: String
  body: String
  featured: Boolean
  author: ID
  slug: String
}

type Query {
  contactmessage(id: ID!): Contactmessage
  contactmessages(sort: String, limit: Int, start: Int, where: JSON): [Contactmessage]
  contactmessagesConnection(sort: String, limit: Int, start: Int, where: JSON): ContactmessageConnection
  designproject(id: ID!): Designproject
  designprojects(sort: String, limit: Int, start: Int, where: JSON): [Designproject]
  designprojectsConnection(sort: String, limit: Int, start: Int, where: JSON): DesignprojectConnection
  member(id: ID!): Member
  members(sort: String, limit: Int, start: Int, where: JSON): [Member]
  membersConnection(sort: String, limit: Int, start: Int, where: JSON): MemberConnection
  photoproject(id: ID!): Photoproject
  photoprojects(sort: String, limit: Int, start: Int, where: JSON): [Photoproject]
  photoprojectsConnection(sort: String, limit: Int, start: Int, where: JSON): PhotoprojectConnection
  post(id: ID!): Post
  posts(sort: String, limit: Int, start: Int, where: JSON): [Post]
  postsConnection(sort: String, limit: Int, start: Int, where: JSON): PostConnection
  testimonial(id: ID!): Testimonial
  testimonials(sort: String, limit: Int, start: Int, where: JSON): [Testimonial]
  testimonialsConnection(sort: String, limit: Int, start: Int, where: JSON): TestimonialConnection
  videoproject(id: ID!): Videoproject
  videoprojects(sort: String, limit: Int, start: Int, where: JSON): [Videoproject]
  videoprojectsConnection(sort: String, limit: Int, start: Int, where: JSON): VideoprojectConnection
  files(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  filesConnection(sort: String, limit: Int, start: Int, where: JSON): UploadFileConnection
  role(id: ID!): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsRole]
  rolesConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsRoleConnection
  user(id: ID!): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
  usersConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsUserConnection
  me: UsersPermissionsMe
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

"""Testimonials about Comet Marketing"""
type Testimonial {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  quote: String
  client: String
  slug: String
}

type TestimonialAggregator {
  count: Int
}

type TestimonialConnection {
  values: [Testimonial]
  groupBy: TestimonialGroupBy
  aggregate: TestimonialAggregator
}

type TestimonialConnection_id {
  key: ID
  connection: TestimonialConnection
}

type TestimonialConnectionClient {
  key: String
  connection: TestimonialConnection
}

type TestimonialConnectionCreatedAt {
  key: DateTime
  connection: TestimonialConnection
}

type TestimonialConnectionQuote {
  key: String
  connection: TestimonialConnection
}

type TestimonialConnectionSlug {
  key: String
  connection: TestimonialConnection
}

type TestimonialConnectionUpdatedAt {
  key: DateTime
  connection: TestimonialConnection
}

type TestimonialGroupBy {
  _id: [TestimonialConnection_id]
  createdAt: [TestimonialConnectionCreatedAt]
  updatedAt: [TestimonialConnectionUpdatedAt]
  quote: [TestimonialConnectionQuote]
  client: [TestimonialConnectionClient]
  slug: [TestimonialConnectionSlug]
}

input TestimonialInput {
  quote: String
  client: String
  slug: String
}

input updateContactmessageInput {
  where: InputID
  data: ContactmessageInput
}

type updateContactmessagePayload {
  contactmessage: Contactmessage
}

input updateDesignprojectInput {
  where: InputID
  data: DesignprojectInput
}

type updateDesignprojectPayload {
  designproject: Designproject
}

input updateMemberInput {
  where: InputID
  data: MemberInput
}

type updateMemberPayload {
  member: Member
}

input updatePhotoprojectInput {
  where: InputID
  data: PhotoprojectInput
}

type updatePhotoprojectPayload {
  photoproject: Photoproject
}

input updatePostInput {
  where: InputID
  data: PostInput
}

type updatePostPayload {
  post: Post
}

input updateRoleInput {
  where: InputID
  data: RoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input updateTestimonialInput {
  where: InputID
  data: TestimonialInput
}

type updateTestimonialPayload {
  testimonial: Testimonial
}

input updateUserInput {
  where: InputID
  data: UserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}

input updateVideoprojectInput {
  where: InputID
  data: VideoprojectInput
}

type updateVideoprojectPayload {
  videoproject: Videoproject
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UploadFile {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  public_id: String
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
}

type UploadFileAggregator {
  count: Int
}

type UploadFileConnection {
  values: [UploadFile]
  groupBy: UploadFileGroupBy
  aggregate: UploadFileAggregator
}

type UploadFileConnection_id {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionCreatedAt {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionExt {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionHash {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionMime {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionName {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionPublic_id {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionSha256 {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionSize {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionUpdatedAt {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileGroupBy {
  _id: [UploadFileConnection_id]
  createdAt: [UploadFileConnectionCreatedAt]
  updatedAt: [UploadFileConnectionUpdatedAt]
  name: [UploadFileConnectionName]
  hash: [UploadFileConnectionHash]
  sha256: [UploadFileConnectionSha256]
  ext: [UploadFileConnectionExt]
  mime: [UploadFileConnectionMime]
  size: [UploadFileConnectionSize]
  url: [UploadFileConnectionUrl]
  provider: [UploadFileConnectionProvider]
  public_id: [UploadFileConnectionPublic_id]
}

input UserInput {
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
}

type UsersPermissionsMe {
  _id: ID!
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  _id: ID!
  name: String!
  description: String
  type: String
}

type UsersPermissionsPermission {
  _id: ID!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
}

type UsersPermissionsRole {
  _id: ID!
  name: String!
  description: String
  type: String
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsRoleAggregator {
  count: Int
}

type UsersPermissionsRoleConnection {
  values: [UsersPermissionsRole]
  groupBy: UsersPermissionsRoleGroupBy
  aggregate: UsersPermissionsRoleAggregator
}

type UsersPermissionsRoleConnection_id {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionDescription {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionName {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionType {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleGroupBy {
  _id: [UsersPermissionsRoleConnection_id]
  name: [UsersPermissionsRoleConnectionName]
  description: [UsersPermissionsRoleConnectionDescription]
  type: [UsersPermissionsRoleConnectionType]
}

type UsersPermissionsUser {
  _id: ID!
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
}

type UsersPermissionsUserAggregator {
  count: Int
}

type UsersPermissionsUserConnection {
  values: [UsersPermissionsUser]
  groupBy: UsersPermissionsUserGroupBy
  aggregate: UsersPermissionsUserAggregator
}

type UsersPermissionsUserConnection_id {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionBlocked {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionConfirmed {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionEmail {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionProvider {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionRole {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUsername {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserGroupBy {
  _id: [UsersPermissionsUserConnection_id]
  username: [UsersPermissionsUserConnectionUsername]
  email: [UsersPermissionsUserConnectionEmail]
  provider: [UsersPermissionsUserConnectionProvider]
  confirmed: [UsersPermissionsUserConnectionConfirmed]
  blocked: [UsersPermissionsUserConnectionBlocked]
  role: [UsersPermissionsUserConnectionRole]
}

"""A project that involved video(s)"""
type Videoproject {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String
  description: String
  featured: Boolean
  date: DateTime
  videoURLs: JSON
  slug: String
  members(sort: String, limit: Int, start: Int, where: JSON): [Member]
}

type VideoprojectAggregator {
  count: Int
}

type VideoprojectConnection {
  values: [Videoproject]
  groupBy: VideoprojectGroupBy
  aggregate: VideoprojectAggregator
}

type VideoprojectConnection_id {
  key: ID
  connection: VideoprojectConnection
}

type VideoprojectConnectionCreatedAt {
  key: DateTime
  connection: VideoprojectConnection
}

type VideoprojectConnectionDate {
  key: DateTime
  connection: VideoprojectConnection
}

type VideoprojectConnectionDescription {
  key: String
  connection: VideoprojectConnection
}

type VideoprojectConnectionFeatured {
  key: Boolean
  connection: VideoprojectConnection
}

type VideoprojectConnectionSlug {
  key: String
  connection: VideoprojectConnection
}

type VideoprojectConnectionTitle {
  key: String
  connection: VideoprojectConnection
}

type VideoprojectConnectionUpdatedAt {
  key: DateTime
  connection: VideoprojectConnection
}

type VideoprojectConnectionVideoURLs {
  key: JSON
  connection: VideoprojectConnection
}

type VideoprojectGroupBy {
  _id: [VideoprojectConnection_id]
  createdAt: [VideoprojectConnectionCreatedAt]
  updatedAt: [VideoprojectConnectionUpdatedAt]
  title: [VideoprojectConnectionTitle]
  description: [VideoprojectConnectionDescription]
  featured: [VideoprojectConnectionFeatured]
  date: [VideoprojectConnectionDate]
  videoURLs: [VideoprojectConnectionVideoURLs]
  slug: [VideoprojectConnectionSlug]
}

input VideoprojectInput {
  title: String
  description: String
  featured: Boolean
  date: DateTime
  videoURLs: JSON
  members: [ID]
  slug: String
}
