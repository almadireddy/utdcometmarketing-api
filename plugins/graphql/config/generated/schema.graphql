"""Message sent via contact form"""
type Contactmesssage {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  email: String
  message: String
  name: String
}

type ContactmesssageAggregator {
  count: Int
}

type ContactmesssageConnection {
  values: [Contactmesssage]
  groupBy: ContactmesssageGroupBy
  aggregate: ContactmesssageAggregator
}

type ContactmesssageConnection_id {
  key: ID
  connection: ContactmesssageConnection
}

type ContactmesssageConnectionCreatedAt {
  key: DateTime
  connection: ContactmesssageConnection
}

type ContactmesssageConnectionEmail {
  key: String
  connection: ContactmesssageConnection
}

type ContactmesssageConnectionMessage {
  key: String
  connection: ContactmesssageConnection
}

type ContactmesssageConnectionName {
  key: String
  connection: ContactmesssageConnection
}

type ContactmesssageConnectionUpdatedAt {
  key: DateTime
  connection: ContactmesssageConnection
}

type ContactmesssageGroupBy {
  _id: [ContactmesssageConnection_id]
  createdAt: [ContactmesssageConnectionCreatedAt]
  updatedAt: [ContactmesssageConnectionUpdatedAt]
  email: [ContactmesssageConnectionEmail]
  message: [ContactmesssageConnectionMessage]
  name: [ContactmesssageConnectionName]
}

input ContactmesssageInput {
  email: String
  message: String
  name: String
}

input createContactmesssageInput {
  data: ContactmesssageInput
}

type createContactmesssagePayload {
  contactmesssage: Contactmesssage
}

input createMemberInput {
  data: MemberInput
}

type createMemberPayload {
  member: Member
}

input createPostInput {
  data: PostInput
}

type createPostPayload {
  post: Post
}

input createProjectInput {
  data: ProjectInput
}

type createProjectPayload {
  project: Project
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

"""
The `DateTime` scalar represents a date and time following the ISO 8601 standard
"""
scalar DateTime

input deleteContactmesssageInput {
  where: InputID
}

type deleteContactmesssagePayload {
  contactmesssage: Contactmesssage
}

input deleteMemberInput {
  where: InputID
}

type deleteMemberPayload {
  member: Member
}

input deletePostInput {
  where: InputID
}

type deletePostPayload {
  post: Post
}

input deleteProjectInput {
  where: InputID
}

type deleteProjectPayload {
  project: Project
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

input FileInput {
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  public_id: String
  related: [ID]
}

input InputID {
  id: ID!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""Members of Comet Marketing"""
type Member {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  gradyear: Int
  profilepicture: UploadFile
  bio: String
  website: String
  role: String
  slug: String
  posts(sort: String, limit: Int, start: Int, where: JSON): [Post]
  projects(sort: String, limit: Int, start: Int, where: JSON): [Project]
}

type MemberAggregator {
  count: Int
  sum: MemberAggregatorSum
  avg: MemberAggregatorAvg
  min: MemberAggregatorMin
  max: MemberAggregatorMax
}

type MemberAggregatorAvg {
  gradyear: Float
}

type MemberAggregatorMax {
  gradyear: Float
}

type MemberAggregatorMin {
  gradyear: Float
}

type MemberAggregatorSum {
  gradyear: Float
}

type MemberConnection {
  values: [Member]
  groupBy: MemberGroupBy
  aggregate: MemberAggregator
}

type MemberConnection_id {
  key: ID
  connection: MemberConnection
}

type MemberConnectionBio {
  key: String
  connection: MemberConnection
}

type MemberConnectionCreatedAt {
  key: DateTime
  connection: MemberConnection
}

type MemberConnectionGradyear {
  key: Int
  connection: MemberConnection
}

type MemberConnectionName {
  key: String
  connection: MemberConnection
}

type MemberConnectionProfilepicture {
  key: ID
  connection: MemberConnection
}

type MemberConnectionRole {
  key: String
  connection: MemberConnection
}

type MemberConnectionSlug {
  key: String
  connection: MemberConnection
}

type MemberConnectionUpdatedAt {
  key: DateTime
  connection: MemberConnection
}

type MemberConnectionWebsite {
  key: String
  connection: MemberConnection
}

type MemberGroupBy {
  _id: [MemberConnection_id]
  createdAt: [MemberConnectionCreatedAt]
  updatedAt: [MemberConnectionUpdatedAt]
  name: [MemberConnectionName]
  gradyear: [MemberConnectionGradyear]
  profilepicture: [MemberConnectionProfilepicture]
  bio: [MemberConnectionBio]
  website: [MemberConnectionWebsite]
  role: [MemberConnectionRole]
  slug: [MemberConnectionSlug]
}

input MemberInput {
  name: String!
  gradyear: Int
  profilepicture: ID
  bio: String
  website: String
  posts: [ID]
  projects: [ID]
  role: String
  slug: String
}

union Morph = UsersPermissionsMe | UsersPermissionsMeRole | Contactmesssage | createContactmesssagePayload | updateContactmesssagePayload | deleteContactmesssagePayload | ContactmesssageConnection | ContactmesssageAggregator | ContactmesssageGroupBy | ContactmesssageConnection_id | ContactmesssageConnectionCreatedAt | ContactmesssageConnectionUpdatedAt | ContactmesssageConnectionEmail | ContactmesssageConnectionMessage | ContactmesssageConnectionName | Member | createMemberPayload | updateMemberPayload | deleteMemberPayload | MemberConnection | MemberAggregator | MemberAggregatorSum | MemberAggregatorAvg | MemberAggregatorMin | MemberAggregatorMax | MemberGroupBy | MemberConnection_id | MemberConnectionCreatedAt | MemberConnectionUpdatedAt | MemberConnectionName | MemberConnectionGradyear | MemberConnectionProfilepicture | MemberConnectionBio | MemberConnectionWebsite | MemberConnectionRole | MemberConnectionSlug | Post | createPostPayload | updatePostPayload | deletePostPayload | PostConnection | PostAggregator | PostGroupBy | PostConnection_id | PostConnectionCreatedAt | PostConnectionUpdatedAt | PostConnectionTitle | PostConnectionBody | PostConnectionFeatured | PostConnectionAuthor | PostConnectionSlug | Project | createProjectPayload | updateProjectPayload | deleteProjectPayload | ProjectConnection | ProjectAggregator | ProjectAggregatorSum | ProjectAggregatorAvg | ProjectAggregatorMin | ProjectAggregatorMax | ProjectGroupBy | ProjectConnection_id | ProjectConnectionCreatedAt | ProjectConnectionUpdatedAt | ProjectConnectionTitle | ProjectConnectionDescription | ProjectConnectionFeatured | ProjectConnectionYear | ProjectConnectionPartners | ProjectConnectionSlug | UploadFile | UploadFileConnection | UploadFileAggregator | UploadFileGroupBy | UploadFileConnection_id | UploadFileConnectionCreatedAt | UploadFileConnectionUpdatedAt | UploadFileConnectionName | UploadFileConnectionHash | UploadFileConnectionSha256 | UploadFileConnectionExt | UploadFileConnectionMime | UploadFileConnectionSize | UploadFileConnectionUrl | UploadFileConnectionProvider | UploadFileConnectionPublic_id | UsersPermissionsPermission | UsersPermissionsRole | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsRoleConnection | UsersPermissionsRoleAggregator | UsersPermissionsRoleGroupBy | UsersPermissionsRoleConnection_id | UsersPermissionsRoleConnectionName | UsersPermissionsRoleConnectionDescription | UsersPermissionsRoleConnectionType | UsersPermissionsUser | createUserPayload | updateUserPayload | deleteUserPayload | UsersPermissionsUserConnection | UsersPermissionsUserAggregator | UsersPermissionsUserGroupBy | UsersPermissionsUserConnection_id | UsersPermissionsUserConnectionUsername | UsersPermissionsUserConnectionEmail | UsersPermissionsUserConnectionProvider | UsersPermissionsUserConnectionConfirmed | UsersPermissionsUserConnectionBlocked | UsersPermissionsUserConnectionRole

type Mutation {
  createContactmesssage(input: createContactmesssageInput): createContactmesssagePayload
  updateContactmesssage(input: updateContactmesssageInput): updateContactmesssagePayload
  deleteContactmesssage(input: deleteContactmesssageInput): deleteContactmesssagePayload
  createMember(input: createMemberInput): createMemberPayload
  updateMember(input: updateMemberInput): updateMemberPayload
  deleteMember(input: deleteMemberInput): deleteMemberPayload
  createPost(input: createPostInput): createPostPayload
  updatePost(input: updatePostInput): updatePostPayload
  deletePost(input: deletePostInput): deletePostPayload
  createProject(input: createProjectInput): createProjectPayload
  updateProject(input: updateProjectInput): updateProjectPayload
  deleteProject(input: deleteProjectInput): deleteProjectPayload

  """Create a new role"""
  createRole(input: createRoleInput): createRolePayload

  """Update an existing role"""
  updateRole(input: updateRoleInput): updateRolePayload

  """Delete an existing role"""
  deleteRole(input: deleteRoleInput): deleteRolePayload
  createUser(input: createUserInput): createUserPayload
  updateUser(input: updateUserInput): updateUserPayload
  deleteUser(input: deleteUserInput): deleteUserPayload
  upload(refId: ID, ref: String, source: String, file: Upload!): UploadFile!
}

"""A blog post"""
type Post {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String
  body: String
  featured: Boolean
  author: Member
  slug: String
}

type PostAggregator {
  count: Int
}

type PostConnection {
  values: [Post]
  groupBy: PostGroupBy
  aggregate: PostAggregator
}

type PostConnection_id {
  key: ID
  connection: PostConnection
}

type PostConnectionAuthor {
  key: ID
  connection: PostConnection
}

type PostConnectionBody {
  key: String
  connection: PostConnection
}

type PostConnectionCreatedAt {
  key: DateTime
  connection: PostConnection
}

type PostConnectionFeatured {
  key: Boolean
  connection: PostConnection
}

type PostConnectionSlug {
  key: String
  connection: PostConnection
}

type PostConnectionTitle {
  key: String
  connection: PostConnection
}

type PostConnectionUpdatedAt {
  key: DateTime
  connection: PostConnection
}

type PostGroupBy {
  _id: [PostConnection_id]
  createdAt: [PostConnectionCreatedAt]
  updatedAt: [PostConnectionUpdatedAt]
  title: [PostConnectionTitle]
  body: [PostConnectionBody]
  featured: [PostConnectionFeatured]
  author: [PostConnectionAuthor]
  slug: [PostConnectionSlug]
}

input PostInput {
  title: String
  body: String
  featured: Boolean
  author: ID
  slug: String
}

"""To be featured on the projects page"""
type Project {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String
  description: String
  featured: Boolean
  year: Int
  partners: String
  slug: String
  pictures(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  videos(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  members(sort: String, limit: Int, start: Int, where: JSON): [Member]
  additionalmedia(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
}

type ProjectAggregator {
  count: Int
  sum: ProjectAggregatorSum
  avg: ProjectAggregatorAvg
  min: ProjectAggregatorMin
  max: ProjectAggregatorMax
}

type ProjectAggregatorAvg {
  year: Float
}

type ProjectAggregatorMax {
  year: Float
}

type ProjectAggregatorMin {
  year: Float
}

type ProjectAggregatorSum {
  year: Float
}

type ProjectConnection {
  values: [Project]
  groupBy: ProjectGroupBy
  aggregate: ProjectAggregator
}

type ProjectConnection_id {
  key: ID
  connection: ProjectConnection
}

type ProjectConnectionCreatedAt {
  key: DateTime
  connection: ProjectConnection
}

type ProjectConnectionDescription {
  key: String
  connection: ProjectConnection
}

type ProjectConnectionFeatured {
  key: Boolean
  connection: ProjectConnection
}

type ProjectConnectionPartners {
  key: String
  connection: ProjectConnection
}

type ProjectConnectionSlug {
  key: String
  connection: ProjectConnection
}

type ProjectConnectionTitle {
  key: String
  connection: ProjectConnection
}

type ProjectConnectionUpdatedAt {
  key: DateTime
  connection: ProjectConnection
}

type ProjectConnectionYear {
  key: Int
  connection: ProjectConnection
}

type ProjectGroupBy {
  _id: [ProjectConnection_id]
  createdAt: [ProjectConnectionCreatedAt]
  updatedAt: [ProjectConnectionUpdatedAt]
  title: [ProjectConnectionTitle]
  description: [ProjectConnectionDescription]
  featured: [ProjectConnectionFeatured]
  year: [ProjectConnectionYear]
  partners: [ProjectConnectionPartners]
  slug: [ProjectConnectionSlug]
}

input ProjectInput {
  title: String
  description: String
  pictures: [ID]
  videos: [ID]
  featured: Boolean
  year: Int
  members: [ID]
  additionalmedia: [ID]
  partners: String
  slug: String
}

type Query {
  contactmesssage(id: ID!): Contactmesssage
  contactmesssages(sort: String, limit: Int, start: Int, where: JSON): [Contactmesssage]
  contactmesssagesConnection(sort: String, limit: Int, start: Int, where: JSON): ContactmesssageConnection
  member(id: ID!): Member
  members(sort: String, limit: Int, start: Int, where: JSON): [Member]
  membersConnection(sort: String, limit: Int, start: Int, where: JSON): MemberConnection
  post(id: ID!): Post
  posts(sort: String, limit: Int, start: Int, where: JSON): [Post]
  postsConnection(sort: String, limit: Int, start: Int, where: JSON): PostConnection
  project(id: ID!): Project
  projects(sort: String, limit: Int, start: Int, where: JSON): [Project]
  projectsConnection(sort: String, limit: Int, start: Int, where: JSON): ProjectConnection
  files(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  filesConnection(sort: String, limit: Int, start: Int, where: JSON): UploadFileConnection
  role(id: ID!): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsRole]
  rolesConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsRoleConnection
  user(id: ID!): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
  usersConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsUserConnection
  me: UsersPermissionsMe
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

input updateContactmesssageInput {
  where: InputID
  data: ContactmesssageInput
}

type updateContactmesssagePayload {
  contactmesssage: Contactmesssage
}

input updateMemberInput {
  where: InputID
  data: MemberInput
}

type updateMemberPayload {
  member: Member
}

input updatePostInput {
  where: InputID
  data: PostInput
}

type updatePostPayload {
  post: Post
}

input updateProjectInput {
  where: InputID
  data: ProjectInput
}

type updateProjectPayload {
  project: Project
}

input updateRoleInput {
  where: InputID
  data: RoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input updateUserInput {
  where: InputID
  data: UserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UploadFile {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  public_id: String
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
}

type UploadFileAggregator {
  count: Int
}

type UploadFileConnection {
  values: [UploadFile]
  groupBy: UploadFileGroupBy
  aggregate: UploadFileAggregator
}

type UploadFileConnection_id {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionCreatedAt {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionExt {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionHash {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionMime {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionName {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionPublic_id {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionSha256 {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionSize {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionUpdatedAt {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileGroupBy {
  _id: [UploadFileConnection_id]
  createdAt: [UploadFileConnectionCreatedAt]
  updatedAt: [UploadFileConnectionUpdatedAt]
  name: [UploadFileConnectionName]
  hash: [UploadFileConnectionHash]
  sha256: [UploadFileConnectionSha256]
  ext: [UploadFileConnectionExt]
  mime: [UploadFileConnectionMime]
  size: [UploadFileConnectionSize]
  url: [UploadFileConnectionUrl]
  provider: [UploadFileConnectionProvider]
  public_id: [UploadFileConnectionPublic_id]
}

input UserInput {
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
}

type UsersPermissionsMe {
  _id: ID!
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  _id: ID!
  name: String!
  description: String
  type: String
}

type UsersPermissionsPermission {
  _id: ID!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
}

type UsersPermissionsRole {
  _id: ID!
  name: String!
  description: String
  type: String
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsRoleAggregator {
  count: Int
}

type UsersPermissionsRoleConnection {
  values: [UsersPermissionsRole]
  groupBy: UsersPermissionsRoleGroupBy
  aggregate: UsersPermissionsRoleAggregator
}

type UsersPermissionsRoleConnection_id {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionDescription {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionName {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionType {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleGroupBy {
  _id: [UsersPermissionsRoleConnection_id]
  name: [UsersPermissionsRoleConnectionName]
  description: [UsersPermissionsRoleConnectionDescription]
  type: [UsersPermissionsRoleConnectionType]
}

type UsersPermissionsUser {
  _id: ID!
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
}

type UsersPermissionsUserAggregator {
  count: Int
}

type UsersPermissionsUserConnection {
  values: [UsersPermissionsUser]
  groupBy: UsersPermissionsUserGroupBy
  aggregate: UsersPermissionsUserAggregator
}

type UsersPermissionsUserConnection_id {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionBlocked {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionConfirmed {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionEmail {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionProvider {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionRole {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUsername {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserGroupBy {
  _id: [UsersPermissionsUserConnection_id]
  username: [UsersPermissionsUserConnectionUsername]
  email: [UsersPermissionsUserConnectionEmail]
  provider: [UsersPermissionsUserConnectionProvider]
  confirmed: [UsersPermissionsUserConnectionConfirmed]
  blocked: [UsersPermissionsUserConnectionBlocked]
  role: [UsersPermissionsUserConnectionRole]
}
